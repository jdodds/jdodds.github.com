<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TECS | Exhortatory]]></title>
  <link href="http://jdodds.github.com/blog/categories/tecs/atom.xml" rel="self"/>
  <link href="http://jdodds.github.com/"/>
  <updated>2012-09-03T11:39:24-04:00</updated>
  <id>http://jdodds.github.com/</id>
  <author>
    <name><![CDATA[Jeremiah Dodds]]></name>
    <email><![CDATA[jeremiah.dodds@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TECS: Introduction]]></title>
    <link href="http://jdodds.github.com/blog/2012/09/03/tecs-introduction/"/>
    <updated>2012-09-03T11:29:00-04:00</updated>
    <id>http://jdodds.github.com/blog/2012/09/03/tecs-introduction</id>
    <content type="html"><![CDATA[<p>This starts a series of posts that will follow my progress while reading
<a href="http://www1.idc.ac.il/tecs/">The Elements of Computing Systems</a>, which so far
seems like a very excellent book. I'll be taking notes as I go along and doing
the exercises.</p>

<p>I'm posting these partially as a motivator for myself to finish the book in
entirety, and just in case someone finds them useful.</p>

<p>Anyhow, on to the start of the runthrough. This post just covers the
introductory material.</p>

<!-- more -->


<h2>The World Above</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (hello.jack)</span> <a href='/downloads/code/tecs/introduction/hello.jack'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="n">Output</span><span class="o">.</span><span class="na">printString</span><span class="o">(</span><span class="s">&quot;Hello, World&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="n">Output</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To run something like this, it must be parsed, "understood", and then expressed
in a form that the machine it's being run on can execute -- a process called
"compilation".</p>

<p>The end result of compilation, machine-level code, is an abstraction on top of
some "hardware architecture", which sits on top of a certain "chipset", made up
of logic gates made out of "switching devices" like transistors. That's as far
down the abstraction ladder we'll go.</p>

<h3>Abstractions</h3>

<p>A good modular design implies that you can work on individual modules while
ignoring the rest of the system.</p>

<p>In computer science, abstraction is defined as a statement of what a module
does, ignoring the details of how it does it.</p>

<h3>The World Below</h3>

<p>We're going to take a "bottom-up" approach to describing the systems of
abstraction in a modern computing system, starting with basic logic gates.</p>

<p>Below, we'll survey the book plan in the opposite direction.</p>

<h4>High-Level Language Land</h4>

<p>Where people dream up applications and write software that implements them.</p>

<h4>The Road Down to Hardware Land</h4>

<p>Taking a program and compiling it into the machine language of a target
platform.</p>

<p>Source text s analyzed and grouped into a "parse tree., which is then processed
to create a program written in an intermediate language executable by a
stack-based virtual machine, which outputs a large assembly program which can be
executed by an assembler.</p>

<h4>Hardware Land</h4>

<p>Described with HDL.</p>
]]></content>
  </entry>
  
</feed>
