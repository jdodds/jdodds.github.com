<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book-runthroughs | Exhortatory]]></title>
  <link href="http://jdodds.github.com/blog/categories/book-runthroughs/atom.xml" rel="self"/>
  <link href="http://jdodds.github.com/"/>
  <updated>2012-10-10T00:46:48-04:00</updated>
  <id>http://jdodds.github.com/</id>
  <author>
    <name><![CDATA[Jeremiah Dodds]]></name>
    <email><![CDATA[jeremiah.dodds@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TECS - boolean logic 1.2: specification]]></title>
    <link href="http://jdodds.github.com/blog/2012/10/05/tecs-boolean-logic-1-dot-2-specification/"/>
    <updated>2012-10-05T12:18:00-04:00</updated>
    <id>http://jdodds.github.com/blog/2012/10/05/tecs-boolean-logic-1-dot-2-specification</id>
    <content type="html"><![CDATA[<p>This is part of a series of posts going through
<a href="http://www1.idc.ac.il/tecs/">The Elements of Computing Systems</a>. This post
covers section 1.2, the specification of a typical set of gates, which will be
built on top of later.</p>

<p>We'll be starting with a <code>Nand</code> gate, and deriving all other gates from it.</p>

<!-- more -->


<h2>The <code>Nand</code> Gate</h2>

<p>The <code>Nand</code> gate computes the following:</p>

<p><code>
| a | b | Nand(a,b) |
|---+---+-----------|
| 0 | 0 |         1 |
| 0 | 1 |         1 |
| 1 | 0 |         1 |
| 1 | 1 |         0 |
</code></p>

<p>And can be specified as:</p>

<p><code>
Chip Name : Nand
Inputs    : a, b
Outputs   : out
Function  : If a=b=1 then out=0 else out=1
Comment   : This gate is considered primitive, there is no need to implement it.
</code></p>

<h2>Basic Logic Gates</h2>

<p>These gates are referred to as "elementary" or "basic", but we do not consider
them "primitive" because they can be created from <code>Nand</code> gates.</p>

<h3>Not</h3>

<p>Also known as a "converter", sets its output to whatever its input isn't.</p>

<p><code>
Chip Name : Not
Inputs    : in
Outputs   : out
Function  : If in=0 then out=1 else out=0
</code></p>

<h3>And</h3>

<p>Returns 1 if and only if both of its inputs are 1.</p>

<p><code>
Chip Name : And
Inputs    : a, b
Outputs   : out
Function  : If a=b=1 then out=1 else out=0.
</code></p>

<h3>Or</h3>

<p>Returns 1 if at least one of its inputs is 1.</p>

<p><code>
Chip Name : Or
Inputs    : a, b
Outputs   : out
Function  : If a=b=0 then out=0 else out=1.
</code></p>

<h3>Xor</h3>

<p>"Exclusive or", returns 1 if its inputs have opposite values.</p>

<p><code>
Chip Name : Xor
Inputs    : a, b
Outputs   : out
Function  : If a&lt;&gt;b then out=1 else out=0.
</code></p>

<h3>Multiplexor</h3>

<p>A three-input gate, it uses one input to select as output the value of one of
the other two inputs. The bit used to select is called the "selection bit", the
other two inputs are called "data bits".</p>

<p><code>
Chip Name : Mux
Inputs    : a, b, sel
Outputs   : out
Function  : If sel=0 then out=a else out=b
</code></p>

<p><code>Mux</code> calculates the following function:</p>

<p><code>
| a | b | sel | out |
|---+---+-----+-----|
| 0 | 0 | 0   | 0   |
| 0 | 1 | 0   | 0   |
| 1 | 0 | 0   | 1   |
| 1 | 1 | 0   | 1   |
| 0 | 0 | 1   | 0   |
| 0 | 1 | 1   | 1   |
| 1 | 0 | 1   | 0   |
| 1 | 1 | 1   | 1   |
</code></p>

<p>Which could be abbreviated as:</p>

<p><code>
|sel|out|
|---+---|
| 0 | a |
| 1 | b |
</code></p>

<h3>Demultiplexor</h3>

<p>Takes a single input and sends it to one of two outputs depending on the value
of a selector bit.</p>

<p><code>
| sel | a  | b  |
|-----+----+----|
|   0 | in | 0  |
|   1 | 0  | in |
</code></p>

<p><code>
Chip Name : DMux
Inputs    : in, sel
Outputs   : a, b
Function  : If sel=0 then {a=in, b=0} else {a=0, b=in}
</code></p>

<h2>Multi-Bit Versions of Basic Gates</h2>

<p>Most computer hardware is meant to work on multi-bit arrays called "buses". A
32-bit computer needs to be able to compute <code>And</code> on two 32-bit buses. We can
build an array of 32 separately-operating binary <code>And</code> gates, and stick it in a
single chip with two 32-bit input buses and one 32-bit output bus.</p>

<p>Here, we're going to look at a set of multi-bit logic gates needed for a 16-bit
computer. It's worth noting that the architecture of <code>n</code>-bit logic gates is not
very dependent on the value of <code>n</code>.</p>

<h3>Multi-Bit Not</h3>

<p><code>
Chip Name : Not16
Inputs    : in[16]
Outputs   : out[16]
Function  : for i=0..15 out[i]=Not(in[i]).
</code></p>

<h3>Multi-Bit And</h3>

<p><code>
Chip Name : And16
Inputs    : a[16], b[16]
Outputs   : out[16]
Function  : For i=0..15 out[i]=And(a[i],b[i]).
</code></p>

<h3>Multi-Bit Or</h3>

<p><code>
Chip Name : Or16
Inputs    : a[16], b[16]
Outputs   : out[16]
Function  : For i=0..15 out[i]=Or(a[i],b[i]).
</code></p>

<h3>Multi-Bit Multiplexor</h3>

<p><code>
Chip Name : Mux16
Inputs    : a[16], b[16], sel
Outputs   : out[16]
Function  : If sel=0 then for i=0..15 out[i]=a[i] else for i=0..15 out[i]=b[i].
</code></p>

<h2>Multi-Way Versions of Basic Gates</h2>

<p>A lot of logic gates that accept two inputs generalize easily to gates that
accept an arbitrary number of inputs.</p>

<h3>Multi-Way Or</h3>

<p><code>
Chip Name : Or8Way
Inputs    : in[8]
Outputs   : out
Function  : out=Or(in[0],in[1],...,in[7]).
</code></p>

<h3>Multi-Way/Multi-Bit Multiplexor</h3>

<p>An <code>m</code>-way <code>n</code>-bit multiplexor chooses one of <code>m</code> <code>n</code>-bit input buses and
outputs it to one <code>n</code>-bit output bus. Selection is controlled by <code>k</code> control
bits, where <code>k = log2m</code>.</p>

<p>The architecture we're making in the book requires a 4-way 16-bit multiplexor,
and an 8-way 16-bit multiplexor.</p>

<p>```
Chip Name : Mux4Way16
Inputs    : a[16], b[16], c[16], d[16], sel[2]
Outputs   : out[16]
Function  : If sel=00 then out=a else if sel=01 then out=b else if self=10 then out=c</p>

<pre><code>        else if sel=11 then out=d
</code></pre>

<p>Comment   : The assignment operations mentioned above are all 16-bit. For</p>

<pre><code>        example, "out=a" means "for i=0..15 out[i]=a[i]".
</code></pre>

<p>```</p>

<p>```
Chip Name : Mux8Way16
Inputs    : a[16], b[16], c[16], d[16], e[16], f[16], g[16], h[16], sel[3]
Outputs   : out[16]
Function  : If sel=000 then out=a else if sel=001 then out=b else if sel=010 then</p>

<pre><code>        out=c ... else if sel=111 then out=h
</code></pre>

<p>Comment   : The assignment operations mentioned above are all 16-bit. For</p>

<pre><code>        example, "out=a" means "for i=0..15 out[i]=a[i]".
</code></pre>

<p>```</p>

<h3>Multi-Way/Multi-bit Demultiplexor</h3>

<p>An <code>m</code>-way demultiplexor takes a single <code>n</code>-bit input to one of <code>m</code> <code>n</code>-bit
outputs. Selection is controlled by a set of <code>k</code> control bits, where <code>k=log2m</code>.</p>

<p>We'll need a 4-way 1-bit demultiplexor, and an 8-way 1-bit multiplexor.</p>

<p>```
Chip Name : DMux4Way
Inputs    : in, sel[2]
Outputs   : a, b, c, d
Function  : If sel=00 then      (a=in, b=c=d=0)</p>

<pre><code>        else if sel=01 then (b=in, a=c=d=0) 
        else if sel=10 then (b=in, a=b=d=0) 
        else if sel=11 then (d=in, a=b=c=0)
</code></pre>

<p>```</p>

<p>```
Chip Name : DMux8Way
Inputs    : in, sel[3]
Outputs   : a, b, c, d, e, f, g, h
Function  : If sel=000 then      (a=in, b=c=d=e=f=g=h=0)</p>

<pre><code>        else if sel=001 then (b=in, a=c=d=e=f=g=h=0) 
        else if sel=010 ...
        ...
        else if sel=111 then (h=in, a=b=c=d=e=f=g=0)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tecs - boolean logic 1.1: background]]></title>
    <link href="http://jdodds.github.com/blog/2012/09/10/tecs-boolean-logic-1-dot-1-background/"/>
    <updated>2012-09-10T17:43:00-04:00</updated>
    <id>http://jdodds.github.com/blog/2012/09/10/tecs-boolean-logic-1-dot-1-background</id>
    <content type="html"><![CDATA[<p>This is part of a series of posts going through
<a href="http://www1.idc.ac.il/tecs/">The Elements of Computing Systems</a>. This post
covers the background section of the first chapter, which is about Boolean
Logic.</p>

<!-- more -->


<h2>Boolean Logic</h2>

<p>All digital devices are made of logic gates. In this book, we'll start with a
Nand gate and build the other gates from it.</p>

<h2>Background</h2>

<p>Boolean gates are implementations of Boolean functions.</p>

<h3>Boolean Algebra</h3>

<p>A Boolean function operates on binary inputs and returns binary outputs.</p>

<h4>Truth Table Representation</h4>

<p><code>
| x | y | z | f(x, y, z) |
|---+---+---+------------|
| 0 | 0 | 0 |          0 |
| 0 | 0 | 1 |          0 |
| 0 | 1 | 0 |          1 |
| 0 | 1 | 1 |          0 |
| 1 | 0 | 0 |          1 |
| 1 | 0 | 1 |          0 |
| 1 | 1 | 0 |          1 |
| 1 | 1 | 1 |          0 |
</code></p>

<h4>Boolean Expressions</h4>

<p>The basic operators are "And", "Or", and "Not"</p>

<ul>
<li><code>x * y</code> is "x And y"</li>
<li><code>x + y</code> is "x Or y"</li>
<li><code>!x</code> is "Not x"</li>
</ul>


<p>The table above could be represented as <code>f(x,y,z) = (x + y) * !z</code>.</p>

<h4>Canonical Representation</h4>

<p>Every Boolean function can be expressed as at least one Boolean Expression, the
"canonical representation"</p>

<p>For each row in the function's truth table that has a value of 1, create a term
by <code>And</code>ing literals that "fix" the values of the row's inputs.</p>

<p><code>
| x | y | z | f(x, y, z) |
|---+---+---+------------|
| 0 | 0 | 0 |          0 |
| 0 | 0 | 1 |          0 |
| 0 | 1 | 0 |          1 |
| 0 | 1 | 1 |          0 |
| 1 | 0 | 0 |          1 |
| 1 | 0 | 1 |          0 |
| 1 | 1 | 0 |          1 |
| 1 | 1 | 1 |          0 |
</code></p>

<p>For the third row, the term would be <code>!xy!z</code>. For the fifth, <code>x!y!z</code> and for the
seventh, <code>xy!z</code>. If we <code>Or</code> those three terms together, we'll have a boolean
expression that is equivalent to the given truth table, <code>!xy!z + x!y!z + xy!z</code></p>

<h4>Two-Input Boolean Functions</h4>

<p>The number of Boolean functions that can be defined over <code>n</code> binary variables is
<code>2^2^n</code></p>

<p>There are, therefore, sixteen functions possible over two boolean variables:</p>

<p><code>
| Function    | x               | 0 0 1 1 |
|             | y               | 0 1 0 1 |
|-------------+-----------------+---------|
| Constant 0  | 0               | 0 0 0 0 |
| And         | x * y           | 0 0 0 1 |
| x And Not y | x * !y          | 0 0 1 0 |
| x           | x               | 0 0 1 1 |
| Not x And y | !x * y          | 0 1 0 0 |
| y           | y               | 0 1 0 1 |
| Xor         | x * !y + !x * y | 0 1 1 0 |
| Or          | x + y           | 0 1 1 1 |
| Nor         | !(x + y)        | 1 0 0 0 |
| Equivalence | x * y + !x * y  | 1 0 0 1 |
| Not y       | !y              | 1 0 1 0 |
| If y then x | x + !y          | 1 0 1 1 |
| Not x       | !x              | 1 1 0 0 |
| If x then y | !x + y          | 1 1 0 1 |
| Nand        | !(x * y)        | 1 1 1 0 |
| Constant 1  | 1               | 1 1 1 1 |
</code></p>

<p>Both <code>Nand</code> and <code>Nor</code> are capable of constructing <code>And</code>, <code>Or</code>, and <code>Not</code> without
using any other functions.</p>

<h3>Gate Logic</h3>

<p>A <code>gate</code> is a device that implements a Boolean function. A Boolean function that
operates on <code>n</code> variables and returns <code>m</code> binary results will have <code>n</code> input
pins and <code>m</code> output pins.</p>

<p>Complex gates can be made from more elementary gates, the same way that complex
functions can be made from simpler functions.</p>

<p>Any technology that allows switching and conducting capabilities can be used to
transmit data between gates, they are not intrinsically tied to
electricity. This allows computer scientists to work on a more abstract level.</p>

<h4>Primitive and Composite Gates</h4>

<p>Logic gates can be chained together to create "composite gates". If we wanted to
make a gate that implemented <code>And(a,b,c)</code>, we could do it as <code>And(And(a,b),c)</code>.</p>

<p>If we wanted to implement <code>Xor(a,b)</code>, we could do so as
<code>Or(And(a,Not(b)),And(Not(a),b))</code>.</p>

<p>The function being implemented -- <code>Xor(a,b)</code> or <code>And(a,b,c)</code> -- can only be
represented in one way when referring to it's high-level interface, but the
implementation of that interface -- <code>Or(And(a,Not(b)),And(Not(a),b))</code> or
<code>And(And(a,b),c)</code> -- might be done in many ways. For instance, it's possible to
implement <code>Xor</code> using only four gates rather than five.</p>

<h3>Actual Hardware Construction</h3>

<p>We could, of course, actually acquire hardware and wire it up to test potential
implementations of interfaces needed. This would, however, be rather tedious.</p>

<h3>Hardware Description Language (HDL)</h3>

<p>Hardware designers generally write an HDL (or VHDL) program which can be run in
a simulator and subjected to a bunch of tests and performance measurements.</p>

<p>An HDL definition of a chip consists of a "header" section, and a "parts"
section. The header specifies the chip's interface -- it's name and the names of
it's input and output pins. The parts section describes the names and
connections between the lower-level parts that make up the chip. This requires
that the designer have complete docs of the interfaces of the lower-level parts.</p>

<p>Here's an HDL program describing <code>Xor</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (xor.vhdl)</span> <a href='/downloads/code/tecs/boolean-logic/background/xor.vhdl'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='vhdl'><span class='line'><span class="n">CHIP</span> <span class="k">Xor</span> <span class="err">{</span>
</span><span class='line'>  <span class="k">in</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">out</span> <span class="k">out</span><span class="p">;</span>
</span><span class='line'>  <span class="n">parts</span><span class="o">:</span>
</span><span class='line'>  <span class="k">Not</span><span class="p">(</span><span class="k">in</span><span class="o">=</span><span class="n">a</span><span class="p">,</span> <span class="k">out</span><span class="o">=</span><span class="n">nota</span><span class="p">);</span>
</span><span class='line'>  <span class="k">Not</span><span class="p">(</span><span class="k">in</span><span class="o">=</span><span class="n">b</span><span class="p">,</span> <span class="k">out</span><span class="o">=</span><span class="n">notb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">And</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="n">notb</span><span class="p">,</span> <span class="k">out</span><span class="o">=</span><span class="n">w1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">And</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">nota</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">,</span> <span class="k">out</span><span class="o">=</span><span class="n">w2</span><span class="p">);</span>
</span><span class='line'>  <span class="k">Or</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">w1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="n">w2</span><span class="p">,</span> <span class="k">out</span><span class="o">=</span><span class="k">out</span><span class="p">);</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Most hardware simulators are designed to be able to run test scripts, here's an
example of one written for Xor:</p>

<p><code>
load Xor.vhdl,
output-list a, b, out;
set a 0, set b 0,
eval, output;
set a 0, set b 1,
eval, output;
set a 1, set b 0,
eval, output;
set a 1, set b 1,
eval, output;
</code></p>

<p>And it's possible output:</p>

<p><code>
| a | b | out |
|---+---+-----|
| 0 | 0 | 0   |
| 0 | 1 | 1   |
| 1 | 0 | 1   |
| 1 | 1 | 0   |
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TECS: Introduction]]></title>
    <link href="http://jdodds.github.com/blog/2012/09/03/tecs-introduction/"/>
    <updated>2012-09-03T11:29:00-04:00</updated>
    <id>http://jdodds.github.com/blog/2012/09/03/tecs-introduction</id>
    <content type="html"><![CDATA[<p>This starts a series of posts that will follow my progress while reading
<a href="http://www1.idc.ac.il/tecs/">The Elements of Computing Systems</a>, which so far
seems like a very excellent book. I'll be taking notes as I go along and doing
the exercises.</p>

<p>I'm posting these partially as a motivator for myself to finish the book in
entirety, and just in case someone finds them useful.</p>

<p>Anyhow, on to the start of the runthrough. This post just covers the
introductory material.</p>

<!-- more -->


<h2>The World Above</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (hello.jack)</span> <a href='/downloads/code/tecs/introduction/hello.jack'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">do</span> <span class="n">Output</span><span class="o">.</span><span class="na">printString</span><span class="o">(</span><span class="s">&quot;Hello, World&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">do</span> <span class="n">Output</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To run something like this, it must be parsed, "understood", and then expressed
in a form that the machine it's being run on can execute -- a process called
"compilation".</p>

<p>The end result of compilation, machine-level code, is an abstraction on top of
some "hardware architecture", which sits on top of a certain "chipset", made up
of logic gates made out of "switching devices" like transistors. That's as far
down the abstraction ladder we'll go.</p>

<h3>Abstractions</h3>

<p>A good modular design implies that you can work on individual modules while
ignoring the rest of the system.</p>

<p>In computer science, abstraction is defined as a statement of what a module
does, ignoring the details of how it does it.</p>

<h3>The World Below</h3>

<p>We're going to take a "bottom-up" approach to describing the systems of
abstraction in a modern computing system, starting with basic logic gates.</p>

<p>Below, we'll survey the book plan in the opposite direction.</p>

<h4>High-Level Language Land</h4>

<p>Where people dream up applications and write software that implements them.</p>

<h4>The Road Down to Hardware Land</h4>

<p>Taking a program and compiling it into the machine language of a target
platform.</p>

<p>Source text s analyzed and grouped into a "parse tree., which is then processed
to create a program written in an intermediate language executable by a
stack-based virtual machine, which outputs a large assembly program which can be
executed by an assembler.</p>

<h4>Hardware Land</h4>

<p>Described with HDL.</p>
]]></content>
  </entry>
  
</feed>
